
BLL
flux
OOP
observer
subscriber
server 
css
git
---------------------------------------
UI
//
nodeJS
SPA single page apllication 
jsx // html внутри js, по сути инструкция по созданию virtual dom element (VDOM)
virtual dom element (VDOM) // 
import/export (+default) 
initialState // начальный стейт обьект
redusers ///это функции которые принимают сущ state(свою нужную часть) и тип Action,модифицируют и возвращают новый стейт
ActionCreator///принимает аргумент возвращает Action и аргумент обьектом
action // обьект у которого как минимум есть свойство тип + иногда переменная аргумент 
rote browser-router 
navlink
route exact 
redax store // принимает redusers создает store
state
connect
mapstatetoprops
dispatch // это единый общий метод для любого изменения стейта, который обьединяет в себе все остальные методы. По сути функция которая нажимает на кнопки нужного метода. Что бы она поняла какакой метод вызвать она принимает аргумент(action)
reducer
ajax axios {запросы на сервак и библиотека, аналог jqwery
   parameters:
   URI - запрос на сервак с параметром через /
   QWERY - запрос на сервас с параметром через ?
}
navlink
router
Class component//
life cycle
container component 
   <
   Presentational Component 
   />
props
callback 
map arr method 
render method
context API
restAPI
pagination
side Effect
module css    // создаем css который по сути инкапсулированный и привязан только к конкретной компоненте
component // функция принимающая props на входе и создающая jsx разметку на выходе 
HOC hight order component // функция(!!не компонент) принимающая компоненту на входе и возвращает другую компоненту на выходе (контейнерную)
DAL
compose // собирает в кучу все обработчики чего либо
redirect
side Effect// у классовой компоненте есть жизненный цикл, например componentDidMount (метод-компонента отрендерелась, была вмонтирована) на этом этапе можно запустить асинхронный код, например запроссы на сервак, обращения в дом елементы сет таймауты
HOC hight order component// принимает компоненту и возвращает контейнерную компоненту. По сути функция которая позволяет создавать контейнерные компоненты и вкидывать в них доп функцонал (with url with router) 




Основные принципы структурирования в случае ООП связаны с различными аспектами базового понимания предметной задачи, которое требуется для оптимального управления соответствующей моделью:

абстракция для выделения в моделируемом предмете важного для решения конкретной задачи по предмету, в конечном счёте — контекстное понимание предмета, формализуемое в виде класса;
инкапсуляция для быстрой и безопасной организации собственно иерархической управляемости: чтобы было достаточно простой команды «что делать», без одновременного уточнения как именно делать, так как это уже другой уровень управления;
наследование для быстрой и безопасной организации родственных понятий: чтобы было достаточно на каждом иерархическом шаге учитывать только изменения, не дублируя всё остальное, учтённое на предыдущих шагах;
полиморфизм для определения точки, в которой единое управление лучше распараллелить или наоборот — собрать воедино.